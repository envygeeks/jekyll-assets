Metrics/LineLength: { Enabled: false }
Style/RescueStandardError: { Enabled: false }
Layout/EmptyLinesAroundModuleBody: { Enabled: false }
Layout/EmptyLinesAroundClassBody: { Enabled: false }
Layout/SpaceInsideBlockBraces: { Enabled: false }
Naming/FileName: { Enabled: false }
Style/Documentation:
  Enabled: false
# --
# ðŸ™ƒ
# Not really necessary.
#   Seriously.
# --
Style/SpecialGlobalVars:
  Enabled: false
# --
# ðŸ˜ž
# Even though I target a specific version,
#   a gem might still be looser.
# --
Gemspec/RequiredRubyVersion:
  Enabled: false
# --
# ðŸ¤­
# My classes, modules, and methods rarely reach this
#   length, but sometimes they do, like Pathutil.
# --
Metrics/MethodLength: { Max:  24 }
Metrics/ModuleLength: { Max: 240 }
Metrics/ClassLength:
  Max: 240
# --
# ðŸ˜ž
# The default size is too small.
#   24 strikes a balance.
# --
Metrics/AbcSize:
  Max: 24
# --
# ðŸ˜ž
# I prefer waterfall styled Gems.
# I find that if you have that many dependends you're
#   mostly doing it wrong anyways.
# --
Gemspec/OrderedDependencies: { Enabled: false }
Bundler/OrderedGems:
  Enabled: false
# --
# ðŸ˜ž
# This will trip on single line methods.
#   I like full blocks on single line methods
#   because it makes life easier.
# --
Style/IfUnlessModifier:
  Enabled: false
# --
# ðŸ˜ž
# I prefer `private` above every method.
#   It's more explicit.
# --
Lint/UselessAccessModifier:
  Enabled: false
# --
# ðŸ˜ž
# There are just too many missed cases.
#   So this is disabled.
# --
Style/BracesAroundHashParameters:
  Enabled: false
# --
# ðŸ˜ž
# Because I like to use Emoji's in comments.
#   This will trip up if you use Emoji's that are
#   within the private space.
# --
Style/AsciiComments:
  Enabled: false
# --
# ðŸ˜ž
# It just causes to many alignment issues.
#   It's too opinated.
# --
Layout/MultilineMethodCallBraceLayout:
  Enabled: false
# --
# ðŸŽ¨
# I like my stuff to be indented 2 spaces.
#   Not aligned at brackets.
# --
Layout/AlignParameters:
  EnforcedStyle: with_fixed_indentation
# --
# ðŸŽ¨
# Makes reorganizing hashes easier.
#   They are non-positional.
# --
Style/TrailingCommaInLiteral:
  EnforcedStyleForMultiline: comma
# --
# ðŸŽ¨
# Disabled because it prevents multi-line blocks.
# I like my stuff to be indented 2 spaces.
#   Not aligned at brackets.
# --
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented
  Enabled: false
# --
# ðŸŽ¨
# I like my stuff to be indented 2 spaces.
#   Not aligned at brackets.
# --
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented
# --
# ðŸŽ¨
# I like my stuff to be indented 2 spaces.
#   Not aligned at brackets, or aligned independently,
#   depending on if it's first, second, or not.
# --
Layout/FirstParameterIndentation:
  EnforcedStyle: consistent
# --
# ðŸŽ¨
# It's better to have private above the method def,
#   this makes it more explicit.
# --
Layout/EmptyLinesAroundAccessModifier:
  Enabled: false
# --
# ðŸ˜ž
# Sometimes has false positives.
#   Disabled because of it.
# --
Layout/EmptyLinesAroundArguments:
  Enabled: false
# --
# ðŸ˜ž
# Sometimes I do not wish to re-enable.
#   This isn't always useful.
# --
Lint/MissingCopEnableDirective:
  Enabled: false
# --
# ðŸ˜ž
# Because sometimes ternary makes more sense, and
#   it might need to be split out.
# --
Style/MultilineTernaryOperator:
  Enabled: false
# --
# ðŸŽ¨
# I like my arrays to be indented 2 spaces.
#   Not aligned at the bracket.
# --
Layout/IndentArray:
  EnforcedStyle: consistent
# --
# ðŸŽ¨
# I like my hashes to be indented 2 spaces.
#   Not aligned at the bracket.
# --
Layout/IndentHash:
  EnforcedStyle: consistent
# --
# ðŸŽ¨
# Sometimes it makes code neater.
#   This is case-by-case.
# --
Style/ParallelAssignment:
  Enabled: false
# --
# ðŸ˜ž
# It doesn't always detect it.
#   Unknown why.
# --
Style/EvalWithLocation:
  Enabled: false
# --
# ðŸ˜ž
# Sometimes has false positives.
#   We still prefer [+-]=.
# --
Style/SelfAssignment:
  Enabled: false
# --
# ðŸ˜ž
# This will trip on single line methods.
#   I like full blocks on single line methods
#   because it makes life easier.
# --
Style/GuardClause:
  Enabled: false
# --
# ðŸ˜ž
# Because it falsley triggers on DateTime.parse
#   When parsing an unknown time, using DateTime is
#   the best way to parse out.
# --
Style/DateTime:
  Enabled: false
# --
# ðŸ˜ž
# Sometimes I prefer to do simple assignment as
#   a single line, if it's readable.
# --
Style/Semicolon:
  AllowAsExpressionSeparator: true
# --
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    '%q': '{}'
    '%Q': '{}'
    '%r': '!!'
    '%s': '()'
    '%w': '()'
    '%W': '()'
    '%x': '()'
    '%i': '()'
    '%I': '()'
# --
# Prefer %r!! over //
# ðŸŽ¨
# --
Style/RegexpLiteral:
  EnforcedStyle: percent_r
# Prefer "" over ''
# ðŸŽ¨
# --
Style/StringLiterals:
  EnforcedStyle: double_quotes
# --
AllCops:
  TargetRubyVersion: 2.3
  Exclude:
    - examples/**/*
    - node_modules/**/*
    - db/schema.rb
    - vendor/**/*
Metrics/BlockLength:
  Exclude:
  - 'spec/**/*_spec.rb'
  - 'config/**/*.rb'
